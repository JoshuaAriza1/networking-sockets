#Sockets

      Stream Sockets - Connection oriented and sequenced; methods for connection establishment and tear-down. Used with TCP, SCTP, and Bluetooth.

    Datagram Sockets - Connectionless; designed for quickly sending and receiving data. Used with UDP.

    RAW Sockets - Direct sending and receiving of IP packets without automatic protocol-specific formatting.

#userspace vs kernal spacce

        User Space Sockets

        Stream Sockets

        Datagram Sockets

    Kernel Space Sockets

        RAW Sockets can not access as user
#Sockets priv

    

    User Space Sockets - The most common sockets that do not require elevated privileges to perform actions on behalf of user applications.

    Kernel Space Sockets - Attempts to access hardware directly on behalf of a user application to either prevent encapsulation/decapsulation or to create packets from scratch, which requires elevated privileges.


#user space applcations


        Using tcpdump or wireshark to read a file

    Using nmap with no switches

    Using netcat to connect to a listener

    Using netcat to create a listener above the well known port range (1024+)

    Using /dev/tcp or /dev/udp to transmit data

    Using tcpdump or wireshark to capture packets on the wire

    Using nmap for OS identification or to set specific flags when scanning

    Using netcat to create a listener in the well known port range (0 - 1023)



#Kernal Space


    Using Scapy to craft or modify a packet for transmission

    Using Python to craft or modify RAW Sockets for transmission

    Network devices using routing protocols such as OSPF

    Any Traffic without Transport Header (ICMP)

#Understanding Python Terminology

    Libraries (Standard Python Library)

        Modules (_import module)

            Functions (module.function)

            Exceptions (try:)

            Constants (AF_INET)

            Objects ()

            List [] vs Tuple ()

#String

    my_string = "Hello World"

    Bytes-like-object

        message = b"Hello World"

integers 


int=1234
float=3.14
hex=0x45


Built in functions

int() len() str() sum() print()

Built-In Methods

    my_string.upper()

    my_string.lower()

    my_string.split()

    my_list.append()

    my_list.insert()


How Imports Work

    import {module}

    import {module} as {name}

    from {module} import *

    from {module} import {function}

    from {module} import {function} as {name}

Network Programming with Python3
tcp socket
Network Programming with Python3

    Network sockets primarily use the Python3 Socket library and socket.socket function.

import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)

The socket.socket Function

    Inside the socket.socket. function, you have these arguments, in order:

socket.socket( *family*, *type*, *proto* )

    family: AF_INET*, AF_INET6, AF_UNIX

    type: SOCK_STREAM*, SOCK_DGRAM, SOCK_RAW

    proto: 0*, IPPROTO_TCP, IPPROTO_UDP, IPPROTO_IP, IPPROTO_ICMP, IPPROTO_RAW
	
pytho3 scokes errors structexceptions sys


#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
ip_addr = '127.0.0.1'
port = 1111
s.connect((ip_addr, port))
message = b"Message"
s.send(message)
data, conn = s.recvfrom(1024)
print(data.decode('utf-8'))
s.close()

#!/usr/bin/python3
import socket
import os
port = 2222
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,0)
s.bind(('', port))
os.system("clear")
print ("Awaiting UDP Messages")
while True:
    data, addr = s.recvfrom(1024)
    address, port = addr
    print ("\nMessage Received: '%s'" % data.decode())
    print ("Sent by -", address, "port", port)
    s.sendto(b"Message received by the UDP Message Server!", addr)

Raw IPV4 Sockets

    RAW Socket scripts must include the IP header and the next headers.

    Requires guidance from the "Request for Comments" (RFC) to follow header structure properly.

        RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.

    See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.

Raw Socket Use Case

    Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering

    Avoiding defense mechanisms

    Obfuscating data during transfer

    Manually crafting a packet with the chosen data in header fields

Python Base64 Encoding

import base64

message = b'Message'
hidden_msg = base64.b64encode(message)


Raw IPV4 Sockets

    RAW Socket scripts must include the IP header and the next headers.

    Requires guidance from the "Request for Comments" (RFC) to follow header structure properly.

        RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.

    See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.

Raw Socket Use Case

    Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering

    Avoiding defense mechanisms

    Obfuscating data during transfer

    Manually crafting a packet with the chosen data in header fields

Base64 Encoding and Decoding

Encode text to base64:

echo "Message" | base64

Endode file to Base64:

base64 file.txt > file-encoded.txt

Decode file from Base64:

base64 -d file-encoded.txt > file-decoded.txt

Python Base64 Encoding

import base64

message = b'Message'
hidden_msg = base64.b64encode(message)

Raw IPV4 and TCP Socket Demos

Follow along with the instructor on the Internet Host

    ipraw.py shell

    tcpraw.py shell



    Encoding

        The process of taking bits and converting them using a specified cipher.

    Decoding

        Reverse of the conversion process used by the specified cipher for encoding.

    Common encoding schemes

        UTF-8, Base64, Hex


    Encoding - converts data into a different format

    Encryption - scrambles data to make it unreadable without a secret key


    Requires guidance from the "Request for Comments" (RFC) to follow header structure properly.

        RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.

    See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.

Raw Socket Use Case

    Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering

    Avoiding defense mechanisms

    Obfuscating data during transfer

    Manually crafting a packet with the chosen data in header fields

Encoding vs Encryption

    Encoding - converts data into a different format

    Encryption - scrambles data to make it unreadable without a secret key

Encoding and Decoding


Hex Encoding and Decoding

Encode text to Hex:

echo "Message" | xxd

Encode file to Hex:

xxd file.txt file-encoded.txt

Decode file from Hex:

xxd -r file-encoded.txt file-decoded.txt

xxd-r file.encoded.txt file.decoded.txt
base64 -d dile.encoded.txt > decoded.txt





    
